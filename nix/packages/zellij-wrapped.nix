{ inputs
, lib
, system
, ...
}@pkgs:
let
  fullPkgs = inputs.nixpkgs.legacyPackages.${system};

  # Provide a Zellij config in the store and point ZELLIJ_CONFIG_DIR to it.
  config = fullPkgs.runCommand "zellij-config" { } ''
        set -eu
        outdir=$out/share/zellij
        mkdir -p "$outdir"
        # Ship a minimal config.kdl. Users can override via ZELLIJ_CONFIG_DIR.
        cat > "$outdir/config.kdl" <<'KDL'
    // Zellij config generated by this flake
    // Docs: https://zellij.dev/documentation/configuration.html

    // Example options; keep minimal and safe by default.
    // Uncomment to customize.
    // default_shell "${fullPkgs.bashInteractive}/bin/bash"
    // mirror_session true
    // simplify_ui true
    KDL
  '';

  # Simple launcher that delegates to upstream zellij
  zellijLauncher = fullPkgs.writeShellScriptBin "zellij" ''
    exec -a "$0" "${fullPkgs.zellij}/bin/zellij" "$@"
  '';

  wm = inputs.wrapper-manager.lib {
    pkgs = fullPkgs;
    inherit lib;
    modules = [
      {
        wrappers.zellij = {
          wrapperType = "shell";
          basePackage = zellijLauncher;
          extraPackages = [
            fullPkgs.zellij
            config
          ];
          env = {
            ZELLIJ_CONFIG_DIR.value = "${config}/share/zellij";
          };
        };
      }
    ];
  };
in
wm.config.wrappers.zellij.wrapped

